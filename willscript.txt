Look:

The Look algorithm operates similarly to the Scan algorithm but the lift changes direction as soon as there are no more pending requests in its current path, rather than waiting to reach the top or bottom floor. It initializes the lift variables, processes floor requests by handling pickups and drop-offs, and dynamically adjusts its direction to optimize movement. This approach helps reduce unnecessary travel time by allowing the lift to reverse direction when needed, improving efficiency compared to Scan. However, like Scan, it does not handle real-time requests, and capacity is still based on the number of people rather than weight. The system remains limited to a single lift without priority queuing or dynamic floor reconfiguration.
Look code rundown:

This program simulates an elevator system that processes floor requests and moves up and down accordingly. It begins by reading input from a file to determine the number of floors, lift capacity, and requests from different floors. The requests are stored in a structured list, and several helper functions manage key aspects such as checking if the lift is full, whether a floor has any requests, and whether all requests have been completed. The lift moves upwards, stopping at floors to pick up and drop off passengers. If it reaches the top or detects no further requests in its direction, it reverses and moves downward, repeating the process. The system ensures that passengers are removed from the lift when they reach their requested floor and prevents unnecessary re-pickups. The process continues in a loop until all requests have been fulfilled and no passengers remain in the lift.

