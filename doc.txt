Lift Control System 
Module: ECM 1414 
 
 
 
Group Members and Student IDs: 
Sam Taylor-King 740026903 
 
 
 
 
 
 
 
Date of submission: 
 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

Introduction: 

Lift scheduling has important real-world applications, efficient algorithms must be designed to limit weight times for users, also there are risks that come with lifts and due to this edge cases must be handled to ensure no harm comes to users such as trapped on floors or lift to drop suddenly. 

 

Purpose of Project: We are aiming to create an efficient lift system which can deal with multiple users requests in queues and implement priorities weight limits and handle edge cases whilst delivering the intended service for users. 

 

Overview: This document will contain: 

 

Scope 
Objectives 
System Overview  
Specification  
 

 

Scope: Our algorithms will simulate lift movements using scan look and an algorithm of our choosing, the algorithms should handle different scenarios such as empty floors and invalid requests. We will design a look a can and a custom algorithm.   

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

Objectives:  

Implement two 3 different algorithms to deal with lift requests, Scan, Look, My Lift 

Use an Queue data structure to manage incoming floor requests 

Weight capacity to prohibit people being taken on all at once  

Use metrics such as total time, average time to deal with request and total floors visited to analyse the efficacy of the algorithms  

Charts generated for easy Comparision 

 

 

Overview of scan algorithm 

The algorithm uses lists to simulate the floors and uses nested loops to loop over floors of the building checking for pickups or drop offs the lift goes up and down and doesn't change direction, along with checks to handle the validity of requests such as invalid requests, if request is valid, it will check the capacity of lift if space available the person will be added to the lift. There are then checks within the lift to check if anyone needs to be dropped off at their floor originally it would drop them off even if they were at back of queue so to amend this, I have used pop [0] to ensure first in first out. My algorithm also prints out a message if this full this helped with de bug as was able to check if the lift ever filled up. 
